// services/api.ts
import axios from "axios";
import { Task } from "../src/app/types";

/**
 * Base URL for task-related API endpoints,
 * loaded from environment variable for flexibility across environments.
 */
const API_URL = process.env.NEXT_PUBLIC_API_URL + "/tasks";

/**
 * Parameters accepted by getTasks to filter and paginate results.
 */
interface GetTasksParams {
  column?: string; // Filter tasks by column key (e.g. backlog, in_progress)
  page?: number; // Page number for pagination
  pageSize?: number; // Number of items per page
  search?: string; // Search query to filter tasks by title/description
  signal?: AbortSignal; // Optional AbortSignal to cancel the request
}

/**
 * Fetches a list of tasks from the API with optional filtering and pagination.
 * Supports request cancellation via AbortSignal.
 *
 * @param params - Optional filtering and pagination parameters.
 * @returns Promise resolving to an array of Task objects.
 */
export const getTasks = async (params?: GetTasksParams): Promise<Task[]> => {
  // Destructure to separate AbortSignal from other query parameters
  const { signal, ...queryParams } = params || {};

  const response = await axios.get<Task[]>(API_URL, {
    params: queryParams,
    signal, // Pass AbortSignal to axios for request cancellation support
  });

  return response.data;
};

/**
 * Creates a new task by sending a POST request with task details.
 *
 * @param newTask - Task data without an ID (to be generated by backend).
 * @returns Promise resolving to the created Task object.
 */
export const createTask = async (newTask: Omit<Task, "id">): Promise<Task> => {
  const response = await axios.post<Task>(API_URL, newTask);
  return response.data;
};

/**
 * Updates an existing task identified by ID with new data.
 *
 * @param id - Unique identifier of the task to update.
 * @param task - Task object containing updated fields.
 * @returns Promise resolving to the updated Task object.
 */
export const updateTask = async (id: number, task: Task): Promise<Task> => {
  const response = await axios.put<Task>(`${API_URL}/${id}`, task);
  return response.data;
};

/**
 * Deletes a task identified by its ID.
 *
 * @param taskId - Unique identifier of the task to delete.
 * @returns Promise resolving to void on successful deletion.
 */
export const deleteTask = async (taskId: number): Promise<void> => {
  await axios.delete(`${API_URL}/${taskId}`);
};
